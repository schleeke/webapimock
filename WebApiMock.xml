<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApiMock</name>
    </assembly>
    <members>
        <member name="T:WebApiMock.Controllers.RequestController">
            <summary>
            Request controller description ^^.
            </summary>
        </member>
        <member name="M:WebApiMock.Controllers.RequestController.Get">
            <summary>
            Gets a list of all existing request definitions.
            </summary>
            <returns>A list of mock-up request.</returns>
            <remarks>
            Sample request:
            
            GET /request
            </remarks>
            <response code="200">All OK.</response>
        </member>
        <member name="M:WebApiMock.Controllers.RequestController.Get(System.Int32)">
            <summary>
            Gets a specific request definition.
            </summary>
            <param name="id">The id of the request definition.</param>
            <returns>The mock-up request with the given id.</returns>
            <remarks>
            Sample request:
            
            GET /request/5
            </remarks>
            <response code="200">All OK.</response>
            <response code="404">A request with the given id was not found.</response>
        </member>
        <member name="M:WebApiMock.Controllers.RequestController.Put(WebApiMock.MockupRequest)">
            <summary>
            Adds a new request definition.
            </summary>
            <param name="request">The mock-up request to add.</param>
            <returns>The added mock-up request with an updated Id value.</returns>
            <remarks>
            Sample request:
            
            PUT /request
            {
              "Id": 0,
              "Route": "myroute/subresource",
              "HttpMethod": "POST",
              "ResponseId": 5
            }
            </remarks>
            <response code="200">All OK.</response>
            <response code="400">A request with the given values already exists.</response>
            <response code="409">The id is not 0 (zero).</response>
        </member>
        <member name="M:WebApiMock.Controllers.RequestController.Patch(System.Int32,WebApiMock.MockupRequest)">
            <summary>
            Updates the values of an existing mock-up request.
            </summary>
            <param name="id">The id of the mock-up request that should be updated.</param>
            <param name="request">A mock-up request with the new values.</param>
            <returns>The updated mock-up request.</returns>
            <remarks>
            Sample request:
            
            PATCH /request/18
            {
              "Id": 18,
              "Route": "mynewroute",
              "HttpMethod": "POST",
              "ResponseId": 5
            }
            </remarks>
            <response code="200">All OK.</response>
            <response code="404">No request with the given id found.</response>
            <response code="406">The ids (query, body) mismatch.</response>
            <response code="409">The id is 0 (null).</response>
        </member>
        <member name="M:WebApiMock.Controllers.RequestController.Delete(System.Int32)">
            <summary>
            Removes a mock-up request from the database.
            </summary>
            <param name="id">The id of the mock-up request that should be removed.</param>
            <returns>Nothing</returns>
            <remarks>
            Sample request:
            
            DELETE /request/18
            </remarks>
            <response code="200">All OK.</response>
            <response code="400">The id is 0 (zero).</response>
            <response code="404">No request with the given id found.</response>
        </member>
        <member name="T:WebApiMock.Controllers.ToolsController">
            <inheritdoc/>
        </member>
        <member name="M:WebApiMock.Controllers.ToolsController.#ctor(WebApiMock.Data.DataService)">
            <inheritdoc/>
        </member>
        <member name="M:WebApiMock.Controllers.ToolsController.Import(System.String)">
            <summary>
            Imports the definitions from the old mock-up service.
            </summary>
            <param name="path">The full path to the application directory of the old service.</param>
            <returns>Nothing/OK</returns>
            <response code="200">All OK.</response>
            <response code="404">The directory was not found.</response>
        </member>
        <member name="M:WebApiMock.Controllers.ToolsController.Delete">
            <summary>
            Deletes the database.
            </summary>
            <returns>Nothing</returns>
            <response code="200">OK. Data successfully deleted (or no data present).</response>
            <response code="500">An error occured while deleting the database file.</response>
        </member>
        <member name="P:WebApiMock.Controllers.ToolsController.Logger">
            <summary>
            The program's logger.
            </summary>
        </member>
        <member name="T:WebApiMock.Data.HttpMethodEnum">
            <summary>
            Enumeration of all mockable HTTP methods.
            </summary>
        </member>
        <member name="F:WebApiMock.Data.HttpMethodEnum.Unknown">
            <summary>
            Unknown HTTP method.
            </summary>
        </member>
        <member name="F:WebApiMock.Data.HttpMethodEnum.GET">
            <summary>
            GET HTTP method.
            </summary>
        </member>
        <member name="F:WebApiMock.Data.HttpMethodEnum.POST">
            <summary>
            POST HTTP method.
            </summary>
        </member>
        <member name="F:WebApiMock.Data.HttpMethodEnum.PUT">
            <summary>
            PUT HTTP method.
            </summary>
        </member>
        <member name="F:WebApiMock.Data.HttpMethodEnum.DELETE">
            <summary>
            DELETE HTTP method.
            </summary>
        </member>
        <member name="F:WebApiMock.Data.HttpMethodEnum.PATCH">
            <summary>
            PATH HTTP method.
            </summary>
        </member>
        <member name="T:WebApiMock.Data.DataService">
            <summary>
            Service / repository for the mockup data access.
            </summary>
        </member>
        <member name="M:WebApiMock.Data.DataService.#ctor">
            <inheritdoc />
        </member>
        <member name="M:WebApiMock.Data.DataService.ResponseExistsForId(System.Int32)">
            <summary>
            Checks if a response with the give record id exists.
            </summary>
            <param name="id">The id of the response record.</param>
            <returns>True if a response record with the given id exists.</returns>
        </member>
        <member name="M:WebApiMock.Data.DataService.ResponseExists(System.Int32,System.String,System.String)">
            <summary>
            Checks if a given respond exists.
            </summary>
            <param name="statusCode">The HTTP status code for the response.</param>
            <param name="response">An (optional) return value for the response.</param>
            <param name="mimeType">The MIME type of the (optional) return value for the response.</param>
            <returns>True, if a response with the given values was found.</returns>
            <remarks>
            If an empty response is passed, the records in the database will be checked for NULL values or empty strings.
            The method will also skip MIME type checking if no response value was passed.
            </remarks>
        </member>
        <member name="M:WebApiMock.Data.DataService.GetResponses">
            <summary>
            Gets all defined mockup responses.
            </summary>
            <returns>An array with all defined mockup responses.</returns>
        </member>
        <member name="M:WebApiMock.Data.DataService.GetResponseById(System.Int32)">
            <summary>
            Gets/returns a mockup response with a given record id.
            </summary>
            <param name="id">The id of the mockup response record.</param>
            <returns>The response record with the mockup values.</returns>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #11 if no response record with the given id was found.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.GetAllResponsesForStatusCode(System.Int32)">
            <summary>
            Returns all responses for a given HTTP status code.
            </summary>
            <param name="statusCode">The HTTP status code.</param>
            <returns>An array with all response records for the given HTTP status code.</returns>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #1 if no responsefor the given HTTP status code was found.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.GetResponse(System.Int32,System.String,System.String)">
            <summary>
            Returns the mockup response record with the given values.
            </summary>
            <param name="statusCode">The HTTP status core of the response.</param>
            <param name="response">The (optional) return value of the response.</param>
            <param name="mimeType">The MIME type for the (optional) return value.</param>
            <returns>The mockup response record for the given values.</returns>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #2 if no matching response was found.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.AddResponse(WebApiMock.MockupResponse)">
            <summary>
            Adds a new mockup response to the database.
            </summary>
            <param name="response">The new response.</param>
            <returns>The new mockup response with the matching id.</returns>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #3 if the id of the given response is not 0 (zero).</exception>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #4 if a response with the same values already exists.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.SetResponseStatusCode(System.Int32,System.Int32)">
            <summary>
            Sets the value of an existing mockup response record HTTP status code to a new one.
            </summary>
            <param name="id">The id of the mockup response record.</param>
            <param name="statusCode">The value of the new HTTP status code.</param>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #5 if no mockup response record with the given id exists.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.SetResponseResponse(System.Int32,System.String)">
            <summary>
            Sets the return value of an existing mockup response record.
            </summary>
            <param name="id">The id of the existing mockup response record.</param>
            <param name="response">The new value for the response's return value.</param>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #5 if no mockup response record with the given id exists.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.SetResponseMimeType(System.Int32,System.String)">
            <summary>
            Sets the value for the MIME type of an existing mockup response record.
            </summary>
            <param name="id">The id of the existing mockup response record.</param>
            <param name="mimeType">The new MIME type value corresponding the the record's response return value.</param>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #5 if no mockup response record with the given id exists.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.RemoveResponse(System.Int32)">
            <summary>
            Removes an existing mockup response record from the database.
            </summary>
            <param name="id">The id of the existing mockup response record.</param>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #5 if no mockup response record with the given id exists.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.GetRequest(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the mockup request record with the given values.
            </summary>
            <param name="httpMethod">The HTTP method for the request.</param>
            <param name="route">The route/relative URL path for the request.</param>
            <param name="query">The (optional) query parameters for the request.</param>
            <param name="body">The (optional) body for the request.</param>
            <returns>The mockup request record with the given values.</returns>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #10 if the HTTP method is unknown.</exception>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #13 if no request with the given values was found.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.RemoveRequest(System.Int32)">
            <summary>
            Removes a request by its id.
            </summary>
            <param name="id">The id of the request record that shall be removed.</param>
            <exception cref="T:WebApiMock.WebApiMockException">Thrown with error code #19 if no record with the given id was found.</exception>
        </member>
        <member name="M:WebApiMock.Data.DataService.GetRequests">
            <summary>
            Returns all existing mockup request records.
            </summary>
            <returns>An array with all request definitions within the database.</returns>
        </member>
        <member name="P:WebApiMock.Data.DataService.Logger">
            <summary>
            The program's logger.
            </summary>
        </member>
        <member name="T:WebApiMock.Extensions">
            <summary>
            General purpose extension methods.
            </summary>
        </member>
        <member name="M:WebApiMock.Extensions.ReadToEnd(System.IO.Stream)">
            <summary>
            Gets the content of a stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>The content of the stream.</returns>
        </member>
        <member name="M:WebApiMock.Extensions.ToMethodString(WebApiMock.Data.HttpMethodEnum)">
            <summary>
            Converts a <see cref="T:WebApiMock.Data.HttpMethodEnum"/> into a proper string.
            </summary>
            <param name="method">The <see cref="T:WebApiMock.Data.HttpMethodEnum"/> to get the string from.</param>
            <returns>A string representation of the HTTP method.</returns>
        </member>
        <member name="M:WebApiMock.Extensions.ToMethodEnum(System.String)">
            <summary>
            Converts a string into a HTTP method enumeration value (<see cref="T:WebApiMock.Data.HttpMethodEnum"/>).
            </summary>
            <param name="methodString">The string to convert into a HTTP method enumeration value.</param>
            <returns>The proper enumeration value.</returns>
        </member>
        <member name="M:WebApiMock.Extensions.GetMockupResponse(System.IO.DirectoryInfo)">
            <summary>
            Gets the response string from a legacy mockup service direcory.
            </summary>
            <param name="dir">The direcory to extract the response from.</param>
            <returns>The response string (default is an empty string).</returns>
        </member>
        <member name="M:WebApiMock.Extensions.GetMockupStatusCode(System.IO.DirectoryInfo)">
            <summary>
            Gets the status code from a legacy mockup service directory.
            </summary>
            <param name="dir">The directory to extract the status code from.</param>
            <returns>The HTTP status code for the directory (default is 200).</returns>
        </member>
        <member name="M:WebApiMock.Extensions.GetFullMessage(System.Exception)">
            <summary>
            Returns the message for an exception.
            </summary>
            <param name="ex"></param>
            <returns>The full exception description including the inner exception's messages.</returns>
        </member>
        <member name="T:WebApiMock.MockupRequest">
            <summary>
            A definition for a request whose response should be mocked. 
            </summary>
        </member>
        <member name="P:WebApiMock.MockupRequest.Id">
            <summary>
            The id of the mockup request definition record.
            </summary>
        </member>
        <member name="P:WebApiMock.MockupRequest.Route">
            <summary>
            The route (relative url) for the request.
            </summary>
            <remarks>
            Do not use leading slashes (/).
            </remarks>
            <example>
            myroute/subcontent
            </example>
        </member>
        <member name="P:WebApiMock.MockupRequest.HttpMethod">
            <summary>
            The HTTP method type for the request definition.
            </summary>
            <remarks>
            Only GET, PUT, POST, DELETE and PATCH are available.
            </remarks>
            <example>GET</example>
        </member>
        <member name="P:WebApiMock.MockupRequest.Query">
            <summary>
            An optional query string.
            </summary>
            <example>
            var1=value1&amp;var2=value2
            </example>
        </member>
        <member name="P:WebApiMock.MockupRequest.Body">
            <summary>
            The body to match for this request definition.
            </summary>
            <remarks>
            Not noted with GET methods.
            </remarks>
        </member>
        <member name="P:WebApiMock.MockupRequest.ResponseId">
            <summary>
            The id to the <see cref="T:WebApiMock.MockupResponse"/> that is linked to the request definition.
            </summary>
        </member>
        <member name="T:WebApiMock.MockupResponse">
            <summary>
            A definition for a mock-up response related to a given <see cref="T:WebApiMock.MockupRequest"/>.
            </summary>
        </member>
        <member name="P:WebApiMock.MockupResponse.Id">
            <summary>
            The id of the record.
            </summary>
        </member>
        <member name="P:WebApiMock.MockupResponse.StatusCode">
            <summary>
            The HTTP status code for the response.
            </summary>
        </member>
        <member name="P:WebApiMock.MockupResponse.MimeType">
            <summary>
            The MIME type of the reponse.
            </summary>
            <remarks>
            Must be filled if <see cref="P:WebApiMock.MockupResponse.Response"/> is set.
            </remarks>
            <example>
            application/json
            </example>
        </member>
        <member name="P:WebApiMock.MockupResponse.Response">
            <summary>
            The content of the response.
            </summary>
            <remarks>
            Must match the <see cref="P:WebApiMock.MockupResponse.MimeType"/> that is refered.
            <see cref="P:WebApiMock.MockupResponse.MimeType"/> must also be set if set.
            </remarks>
        </member>
        <member name="M:WebApiMock.Program.Main(System.String[])">
            <summary>
            Main entry point of the program.
            </summary>
            <param name="args">A list of command line arguments.</param>
            <returns>0 (zero) if no errors occured.</returns>
            <remarks>
             The value corresponds to the <see cref="T:Topshelf.TopshelfExitCode"/> enumeration.
            </remarks>
        </member>
        <member name="P:WebApiMock.Program.ApplicationDirectory">
            <summary>
            The application's directory.
            </summary>
        </member>
        <member name="T:WebApiMock.WebApiMockException">
            <summary>
            An exception thrown by the web API mock-up service.
            </summary>
        </member>
        <member name="P:WebApiMock.WebApiMockException.ErrorCode">
            <summary>
            The error code that is associated with this exception.
            </summary>
        </member>
        <member name="T:WebApiMock.Web.MockupMiddleware">
            <summary>
            Web request middleware for interception requests and mocking their response if neccessary/defined.
            </summary>
        </member>
        <member name="P:WebApiMock.Web.MockupMiddleware.Logger">
            <summary>
            The program's logger.
            </summary>
        </member>
        <member name="T:WebApiMock.Web.Startup">
            <summary>
            Configuration for the web server.
            </summary>
        </member>
        <member name="M:WebApiMock.Web.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <inheritdoc/>
        </member>
        <member name="T:WebApiMock.Web.WebExtensions">
            <summary>
            Extension methods for the web/HTTP module(s) of the application.
            </summary>
        </member>
        <member name="M:WebApiMock.Web.WebExtensions.GetHttpMethod(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the HTTP method from the request context.
            </summary>
            <param name="context">The HTTP context to get the HTTP method from.</param>
            <returns>The value of the HTTP method.</returns>
        </member>
        <member name="M:WebApiMock.Web.WebExtensions.GetRequestInfo(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Extracts the infos that are needed for mock-up detection from the HTTP request context.
            </summary>
            <param name="context">The HTTP context.</param>
            <returns>Route (relative path), query part, body and HTTP method of the request.</returns>
        </member>
        <member name="T:WebApiMock.WindowsServiceController">
            <summary>
            Controller class for the Topshelf service wrapper.
            </summary>
        </member>
        <member name="M:WebApiMock.WindowsServiceController.Start(Topshelf.HostControl)">
            <summary>
            Starts the service/program.
            </summary>
            <param name="hostCrtl">The <see cref="T:Topshelf.HostControl"/> of the current service controller.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:WebApiMock.WindowsServiceController.Stop(Topshelf.HostControl)">
            <summary>
            Stops the service/program.
            </summary>
            <param name="hostCrtl">The <see cref="T:Topshelf.HostControl"/> of the current service controller.</param>
            <returns>True if successful.</returns>
        </member>
    </members>
</doc>
